
const axios = require('axios');
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');

const app = express();
const PORT = process.env.PORT || 3000;

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const BINANCE_API_KEY = process.env.BINANCE_API_KEY;
const BINANCE_SECRET_KEY = process.env.BINANCE_SECRET_KEY;

const bot = new TelegramBot(TELEGRAM_TOKEN);

async function fetchBinanceOffers() {
    const url = 'https://p2p.binance.com/bapi/c2c/v2/friendly/c2c/adv/search';
    const body = {
        page: 1,
        rows: 5,
        payTypes: [],
        countries: [],
        publisherType: null,
        asset: 'USDT',
        fiat: 'UAH',
        tradeType: 'BUY'
    };

    const headers = {
        'Content-Type': 'application/json',
        'User-Agent': 'Mozilla/5.0'
    };

    try {
        const response = await axios.post(url, body, { headers });
        return response.data.data || [];
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤:", err.message);
        return [];
    }
}

async function sendTelegramPush(text) {
    try {
        await bot.sendMessage(TELEGRAM_CHAT_ID, text, { parse_mode: 'HTML' });
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", err.message);
    }
}


async function mainLoop() {
    const offers = await fetchBinanceOffers();

    const marketSellPrice = 42.30; // üí° –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ (–≤ –±—É–¥—É—â–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º)
    const uahBudget = 200 * parseFloat(offers[0]?.adv?.price || 41.5);

    for (let offer of offers) {
        const adv = offer.adv;
        const advertiser = offer.advertiser;

        const price = parseFloat(adv.price);
        const profit = marketSellPrice - price;
        const roi = (profit / price) * 100;
        const profitUah = profit * 200;

        let roiText = `<span class="green">+${roi.toFixed(2)}%</span>`;
        if (roi < 1.5 && roi >= 0.5) roiText = `<span class="orange">~${roi.toFixed(2)}%</span>`;
        if (roi < 0.5) roiText = `<span class="red">${roi.toFixed(2)}%</span>`;

        if (roi < 1) continue; // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ ROI

        const msg = `
üìå <b>–ú–æ–≥—É –∫—É–ø–∏—Ç—å</b>
üíµ <b>–ö—É—Ä—Å:</b> ${price} UAH
üè¶ <b>–ë–∞–Ω–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> ${adv.tradeMethods.map(m => m.identifier).join(', ')}
üí≥ <b>–õ–∏–º–∏—Ç:</b> ${adv.minSingleTransAmount} ‚Äì ${adv.maxSingleTransAmount} –≥—Ä–Ω
üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> ${advertiser.nickName}

üîÅ <b>–°–≤—è–∑–∫–∞:</b> –ö—É–ø–∏–ª –∑–∞ ${price} —á–µ—Ä–µ–∑ ${adv.tradeMethods[0]?.identifier} ‚ûú –ü—Ä–æ–¥–∞–ª –∑–∞ ${marketSellPrice} —á–µ—Ä–µ–∑ Wise  
üìà <b>–ü—Ä–æ—Ñ–∏—Ç:</b> <b>${roiText}</b> (~${profitUah.toFixed(0)} –≥—Ä–Ω —Å $200)

üîó <a href="https://p2p.binance.com/ru/advertiserDetail?advertiserNo=${advertiser.userNo}">–û—Ç–∫—Ä—ã—Ç—å –æ—Ñ—Ñ–µ—Ä –≤ Binance</a>
`;

        await sendTelegramPush(msg);
    }
}


app.get('/', (_, res) => res.send('P2P bot is running!'));
app.listen(PORT, () => {
    console.log(`Fake server running on port ${PORT}`);
    setInterval(mainLoop, 60 * 1000);
    mainLoop();
});
