const express = require('express');
const axios = require('axios');
const TelegramBot = require('node-telegram-bot-api');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚Äì —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ —á–∞—Ç-ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const CHAT_ID = process.env.CHAT_ID;
const SELL_RATE = 42.30;  // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ USDT –∑–∞ UAH

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è Render
const app = express();
const PORT = process.env.PORT || 3000;
app.get('/', (req, res) => res.send('Bot is running'));
app.listen(PORT, () => {
    console.log(`Express server listening on port ${PORT}`);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot API
const bot = new TelegramBot(BOT_TOKEN, { polling: false });

// –§—É–Ω–∫—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
async function mainLoop() {
    try {
        console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤ —Å Binance P2P...');
        // –ó–∞–ø—Ä–æ—Å –æ—Ñ—Ñ–µ—Ä–æ–≤ (–ø—Ä–æ–¥–∞—é—â–∏–µ USDT –∑–∞ UAH) —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API Binance P2P
        const payload = {
            page: 1,
            rows: 20,                // –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ø-20 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            asset: 'USDT',
            fiat: 'UAH',
            tradeType: 'BUY',
            publisherType: null      // –ø–æ–ª—É—á–∞–µ–º –æ—Ñ—Ñ–µ—Ä—ã –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ (–Ω–µ —Ç–æ–ª—å–∫–æ –º–µ—Ä—á–∞–Ω—Ç–æ–≤)
        };
        const response = await axios.post('https://p2p.binance.com/bapi/c2c/v2/friendly/c2c/adv/search', payload, {
            headers: { 'Content-Type': 'application/json' }
        });
        const data = response.data;
        if (!data || !data.success) {
            console.error('‚ùå –û—à–∏–±–∫–∞ API Binance P2P –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
            return;
        }
        const offers = data.data;  // –º–∞—Å—Å–∏–≤ –æ—Ñ—Ñ–µ—Ä–æ–≤

        console.log(`‚úÖ –û—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${offers.length}`);
        if (!offers.length) {
            return;  // –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
        for (const offer of offers) {
            const adv = offer.adv;
            const advertiser = offer.advertiser;
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            const price = parseFloat(adv.price);  // —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ USDT (UAH –∑–∞ 1 USDT)
            const minLimit = parseFloat(adv.minSingleTransAmount);
            const maxLimit = parseFloat(adv.maxSingleTransAmount);
            const payMethods = adv.tradeMethods.map(m => m.tradeMethodName);
            const sellerName = advertiser.nickName;

            // –†–∞—Å—á–µ—Ç ROI (%) –∏ –ø—Ä–æ—Ñ–∏—Ç–∞ (UAH)
            const roi = (SELL_RATE / price - 1) * 100;
            const profit = SELL_RATE - price;

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ñ—Ñ–µ—Ä—ã —Å ROI <= 1%
            if (roi <= 1) {
                continue;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º emoji –¥–ª—è ROI –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–æ—Ä–æ–≥–∞–º
            let roiEmoji;
            if (roi > 1.5) {
                roiEmoji = 'üü¢';
            } else if (roi >= 0.5 && roi <= 1.5) {
                roiEmoji = 'üü°';
            } else {
                roiEmoji = 'üî¥';
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            const priceStr = price.toFixed(2);        // –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            const minStr = Number.isInteger(minLimit) ? minLimit.toFixed(0) : minLimit.toFixed(2);
            const maxStr = Number.isInteger(maxLimit) ? maxLimit.toFixed(0) : maxLimit.toFixed(2);
            const roiStr = roi.toFixed(1);            // ROI —Å –æ–¥–Ω–∏–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–º –∑–Ω–∞–∫–æ–º
            const profitStr = profit.toFixed(2);      // –ø—Ä–∏–±—ã–ª—å –≤ –≥—Ä–Ω —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏
            const methodsStr = payMethods.join(', '); // –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
            const message = 
                `–ú–æ–≥—É –∫—É–ø–∏—Ç—å USDT –∑–∞ <b>${priceStr}‚Ç¥</b> (${methodsStr})` +
                `, –ª–∏–º–∏—Ç <b>${minStr}-${maxStr}‚Ç¥</b>` +
                `, –ø—Ä–æ–¥–∞–≤–µ—Ü <b>${sellerName}</b>` +
                `, ${priceStr}‚Üí${SELL_RATE.toFixed(2)}` +
                `, ROI: ${roiEmoji} <b>${roiStr}%</b> +${profitStr}‚Ç¥` +
                `, <a href="https://p2p.binance.com/ru/trade/buy/USDT?fiat=UAH&merchant=${encodeURIComponent(sellerName)}">Binance</a>`;

            try {
                await bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML', disable_web_page_preview: true });
                console.log(`‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram: –ø—Ä–æ–¥–∞–≤–µ—Ü ${sellerName}, ROI ~${roiStr}%`);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', err.message);
            }
        }
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:', err.message);
    }
}

// –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
mainLoop();  // –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
setInterval(mainLoop, 60000);
